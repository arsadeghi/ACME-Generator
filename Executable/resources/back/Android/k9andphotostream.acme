import families/Android.acme;
system k9andphotostream : Android = new Android extended with {
  component Message_Provider : ContentProviderComponentT = new ContentProviderComponentT extended with {
     port ContentProviderResponsePortT0 : ContentProviderResponsePortT = new ContentProviderResponsePortT extended with {
        rule attachedOnlyToRepositoryRole = invariant forall r : Role in self.ATTACHEDROLES | declaresType(r, RepositoryRoleT);
     };
     property read-permission = "com.fsck.k9.permission.READ_MESSAGES";
     property write-permission = "com.fsck.k9.permission.DELETE_MESSAGES";
     property exported = true;
     rule atLeastTheseTypesRepositoryPortT = invariant exists e in self.PORTS | declaresType(e, RepositoryPortT);
  };
  component Boot_Receiver : BroadcastReceiverComponentT = new BroadcastReceiverComponentT extended with {
     port ImplicitIntentBroadcastReceivePortT0 : ImplicitIntentBroadcastReceivePortT = new ImplicitIntentBroadcastReceivePortT extended with {
        rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | declaresType(a, ReceiverRoleT);
        rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
        rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, SubscriberRoleT);
     };
     property intentFilters U= {
        "android.intent.action.BOOT_COMPLETED", "android.intent.action.DEVICE_STORAGE_LOW", "android.intent.action.DEVICE_STORAGE_OK", "android.net.conn.CONNECTIVITY_CHANGE", "android.net.conn.BACKGROUND_DATA_SETTING_CHANGED", "com.android.sync.SYNC_CONN_STATUS_CHANGED" };
     property exported = true;
     rule exportedIfIntentFilters = heuristic exported <-> size(intentFilters) > 0;
  };
  component Message_Compose : ActivityComponentT = new ActivityComponentT extended with {
     port p : ExplicitIntentCallPortT = new ExplicitIntentCallPortT extended with {
        property componentReference = "com.fsck.k9.activity.EmailAddressList";
        rule mustReferenceComponent = invariant hasValue(componentReference);
        rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
        rule attachedOnlyToCallerRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, CallerRoleT);
     };
     port ExplicitIntentCallPortT0 : ExplicitIntentCallPortT = new ExplicitIntentCallPortT extended with {
        property componentReference = "com.fsck.k9.activity.Accounts";
        rule mustReferenceComponent = invariant hasValue(componentReference);
        rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
        rule attachedOnlyToCallerRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, CallerRoleT);
     };
     port ImplicitIntentBroadcastReceivePortT0 : ImplicitIntentBroadcastReceivePortT = new ImplicitIntentBroadcastReceivePortT extended with {
        rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | declaresType(a, ReceiverRoleT);
        rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
        rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, SubscriberRoleT);
     };
     port ImplicitIntentBroadcastAnnouncerPortT0 : ImplicitIntentBroadcastAnnouncerPortT = new ImplicitIntentBroadcastAnnouncerPortT extended with {
        property action = "ACTION_GET_CONTENT";
        property category = "CATEGORY_OPENABLE";
        rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | declaresType(a, AnnouncerRoleT);
        rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
        rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, PublisherRoleT);
     };
     port ExplicitIntentCallPortT1 : ExplicitIntentCallPortT = new ExplicitIntentCallPortT extended with {
        rule mustReferenceComponent = invariant hasValue(componentReference);
        rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
        rule attachedOnlyToCallerRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, CallerRoleT);
     };
     port p0 : ExplicitIntentCallPortT = new ExplicitIntentCallPortT extended with {
        rule mustReferenceComponent = invariant hasValue(componentReference);
        rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
        rule attachedOnlyToCallerRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, CallerRoleT);
     };
     property state = Created;
     property intentFilters = {
        "android.intent.action.SENDTO", "android.intent.action.SEND", "android.intent.action.SEND_MULTIPLE", "android.intent.action.VIEW" };
     property exported = true;
     property class = "com.fsck.k9.activity.MessageCompose";
     rule activityStateValid = invariant hasValue(state);
     rule exportedIfIntentFilters = heuristic exported <-> size(intentFilters) > 0;
  };
  component Choose_Folder : ActivityComponentT = new ActivityComponentT extended with {
     port p : ExplicitIntentResponsePortT = new ExplicitIntentResponsePortT extended with {
        rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
        rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, ResponderRoleT);
     };
     port p1 : ExplicitIntentCallPortT = new ExplicitIntentCallPortT extended with {
        property componentReference = "com.fsck.k9.activity.MessageList";
        rule mustReferenceComponent = invariant hasValue(componentReference);
        rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
        rule attachedOnlyToCallerRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, CallerRoleT);
     };
     property state = Created;
     property intentFilters = {
     };
     property exported = false;
     rule activityStateValid = invariant hasValue(state);
     rule exportedIfIntentFilters = heuristic exported <-> size(intentFilters) > 0;
  };
  component Attachment_Provider : ContentProviderComponentT = new ContentProviderComponentT extended with {
     port p : ContentProviderResponsePortT = new ContentProviderResponsePortT extended with {
        rule attachedOnlyToRepositoryRole = invariant forall r : Role in self.ATTACHEDROLES | declaresType(r, RepositoryRoleT);
     };
     property read-permission = "com.fsck.k9.permission.READ_ATTACHMENT";
     property write-permission = "";
     property exported = true;
     rule atLeastTheseTypesRepositoryPortT = invariant exists e in self.PORTS | declaresType(e, RepositoryPortT);
  };
  component Accounts : ActivityComponentT = new ActivityComponentT extended with {
     port ExplicitIntentResponsePortT0 : ExplicitIntentResponsePortT = new ExplicitIntentResponsePortT extended with {
        rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
        rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, ResponderRoleT);
     };
     port ImplicitIntentBroadcastReceivePortT0 : ImplicitIntentBroadcastReceivePortT = new ImplicitIntentBroadcastReceivePortT extended with {
        rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | declaresType(a, ReceiverRoleT);
        rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
        rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, SubscriberRoleT);
     };
     property state = Created;
     property class = "com.fsck.k9.activity.Accounts";
     property intentFilters = {
        "android.intent.action.MAIN", "android.intent.action.VIEW" };
     property exported = true;
     rule activityStateValid = invariant hasValue(state);
     rule exportedIfIntentFilters = heuristic exported <-> size(intentFilters) > 0;
  };
  component Notification_Service : ServiceComponentT = new ServiceComponentT extended with {
     port ImplicitIntentBroadcastReceivePortT0 : ImplicitIntentBroadcastReceivePortT = new ImplicitIntentBroadcastReceivePortT extended with {
        rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | declaresType(a, ReceiverRoleT);
        rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
        rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, SubscriberRoleT);
     };
     property intentFilters = {
     };
     property exported = false;
     rule exportedIfIntentFilters = heuristic exported <-> size(intentFilters) > 0;
  };
  component MailService : ServiceComponentT = new ServiceComponentT extended with {
     port ImplicitIntentBroadcastReceivePortT0 : ImplicitIntentBroadcastReceivePortT = new ImplicitIntentBroadcastReceivePortT extended with {
        rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | declaresType(a, ReceiverRoleT);
        rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
        rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, SubscriberRoleT);
     };
     property intentFilters = {
     };
     property exported = false;
     rule exportedIfIntentFilters = heuristic exported <-> size(intentFilters) > 0;
  };
  component Edit_Identities : ActivityComponentT = new ActivityComponentT extended with {
     port p : ExplicitIntentResponsePortT = new ExplicitIntentResponsePortT extended with {
        rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
        rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, ResponderRoleT);
     };
     property state = Created;
     property intentFilters = {
     };
     property class = "com.fsck.k9.activity.EditIdentity";
     property exported = false;
     rule activityStateValid = invariant hasValue(state);
     rule exportedIfIntentFilters = heuristic exported <-> size(intentFilters) > 0;
  };
  component Remote_Control_Receiver : BroadcastReceiverComponentT = new BroadcastReceiverComponentT extended with {
     port p : ImplicitIntentBroadcastReceivePortT = new ImplicitIntentBroadcastReceivePortT extended with {
        rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | declaresType(a, ReceiverRoleT);
        rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
        rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, SubscriberRoleT);
     };
     property permission = "com.fsk.k9.permission.REMOTE_CONTROL";
     property intentFilters = {
        "com.fsck.k9.k9RemoteControl.set", "com.fsck.k9.K(RemoteControl.requestAccounts" };
     property exported = true;
     rule exportedIfIntentFilters = heuristic exported <-> size(intentFilters) > 0;
  };
  component Message_List : ActivityComponentT = new ActivityComponentT extended with {
     port ImplicitIntentBroadcastReceivePortT0 : ImplicitIntentBroadcastReceivePortT = new ImplicitIntentBroadcastReceivePortT extended with {
        rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | declaresType(a, ReceiverRoleT);
        rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
        rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, SubscriberRoleT);
     };
     port p : ContentProviderCallPortT = new ContentProviderCallPortT extended with {
        rule attachedOnlyToDataAccessorRole = invariant forall r : Role in self.ATTACHEDROLES | declaresType(r, DataAccessorRoleT);
     };
     port ContentProviderCallPortT0 : ContentProviderCallPortT = new ContentProviderCallPortT extended with {
        rule attachedOnlyToDataAccessorRole = invariant forall r : Role in self.ATTACHEDROLES | declaresType(r, DataAccessorRoleT);
     };
     port ContentProviderCallPortT1 : ContentProviderCallPortT = new ContentProviderCallPortT extended with {
        rule attachedOnlyToDataAccessorRole = invariant forall r : Role in self.ATTACHEDROLES | declaresType(r, DataAccessorRoleT);
     };
     port p1 : ExplicitIntentResponsePortT = new ExplicitIntentResponsePortT extended with {
        rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
        rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, ResponderRoleT);
     };
     property state = Created;
     property intentFilters = {
        "android.intent.action.MAIN", "android.intent.action.VIEW" };
     property exported = true;
     property class = "com.fsck.k9.activity.MessageList";
     rule activityStateValid = invariant hasValue(state);
     rule exportedIfIntentFilters = heuristic exported <-> size(intentFilters) > 0;
  };
  component Email_Provider : ContentProviderComponentT = new ContentProviderComponentT extended with {
     port p : ContentProviderResponsePortT = new ContentProviderResponsePortT extended with {
        rule attachedOnlyToRepositoryRole = invariant forall r : Role in self.ATTACHEDROLES | declaresType(r, RepositoryRoleT);
     };
     property read-permission = "";
     property write-permission = "";
     property exported = false;
     rule atLeastTheseTypesRepositoryPortT = invariant exists e in self.PORTS | declaresType(e, RepositoryPortT);
  };
  component Email_Address_List : ActivityComponentT = new ActivityComponentT extended with {
     port p : ExplicitIntentResponsePortT = new ExplicitIntentResponsePortT extended with {
        rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
        rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, ResponderRoleT);
     };
     property state = Created;
     property intentFilters = {
     };
     property exported = false;
     rule activityStateValid = invariant hasValue(state);
     rule exportedIfIntentFilters = heuristic exported <-> size(intentFilters) > 0;
  };
  component Account_Setting : ActivityComponentT = new ActivityComponentT extended with {
     port ExplicitIntentCallPortT0 : ExplicitIntentCallPortT = new ExplicitIntentCallPortT extended with {
        property componentReference = "com.fsck.k9.activity.ManageIdentities";
        property action = "ACTIVITY_MANAGE_IDENTITIES";
        rule mustReferenceComponent = invariant hasValue(componentReference);
        rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
        rule attachedOnlyToCallerRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, CallerRoleT);
     };
     property state = Created;
     property intentFilters = {
     };
     property class = "com.fsck.k9.activity.setup.AccountSettings";
     property exported = false;
     rule activityStateValid = invariant hasValue(state);
     rule exportedIfIntentFilters = heuristic exported <-> size(intentFilters) > 0;
  };
  component Remote_Control_Service : ServiceComponentT = new ServiceComponentT extended with {
     port ImplicitIntentBroadcastReceivePortT0 : ImplicitIntentBroadcastReceivePortT = new ImplicitIntentBroadcastReceivePortT extended with {
        rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | declaresType(a, ReceiverRoleT);
        rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
        rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, SubscriberRoleT);
     };
     property intentFilters = {
     };
     property permission = "com.fsk.k9.permission.REMOTE_CONTROL";
     property exported = false;
     rule exportedIfIntentFilters = heuristic exported <-> size(intentFilters) > 0;
  };
  component Storage_Receiver : BroadcastReceiverComponentT = new BroadcastReceiverComponentT extended with {
     port ImplicitIntentBroadcastReceivePortT0 : ImplicitIntentBroadcastReceivePortT = new ImplicitIntentBroadcastReceivePortT extended with {
        rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | declaresType(a, ReceiverRoleT);
        rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
        rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, SubscriberRoleT);
     };
     property intentFilters = {
        "android.intent.action.MEDIA_MOUNTED" };
     property exported = true;
     rule exportedIfIntentFilters = heuristic exported <-> size(intentFilters) > 0;
  };
  component Unread_Widget_Provider : BroadcastReceiverComponentT = new BroadcastReceiverComponentT extended with {
     port ImplicitIntentBroadcastReceivePortT0 : ImplicitIntentBroadcastReceivePortT = new ImplicitIntentBroadcastReceivePortT extended with {
        rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | declaresType(a, ReceiverRoleT);
        rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
        rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, SubscriberRoleT);
     };
     property exported = true;
     property intentFilters = {
        "android.appwidget.action.APPWIDGET_UPDATE" };
     rule exportedIfIntentFilters = heuristic exported <-> size(intentFilters) > 0;
  };
  component Manage_Identities : ActivityComponentT = new ActivityComponentT extended with {
     port ExplicitIntentResponsePortT0 : ExplicitIntentResponsePortT = new ExplicitIntentResponsePortT extended with {
        rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
        rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, ResponderRoleT);
     };
     port p : ExplicitIntentCallPortT = new ExplicitIntentCallPortT extended with {
        property action = "";
        property componentReference = "com.fsck.k9.activity.EditIdentity";
        rule mustReferenceComponent = invariant hasValue(componentReference);
        rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
        rule attachedOnlyToCallerRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, CallerRoleT);
     };
     property state = Created;
     property intentFilters U= {
     };
     property class = "com.fsck.k9.activity.ManageIdentities";
     property exported = false;
     rule activityStateValid = invariant hasValue(state);
     rule exportedIfIntentFilters = heuristic exported <-> size(intentFilters) > 0;
  };
  component LoginActivity : ActivityComponentT = new ActivityComponentT extended with {
     port ExplicitIntentCallPortT0 : ExplicitIntentCallPortT = new ExplicitIntentCallPortT extended with {
        property componentReference = "SettingsActivity";
        rule mustReferenceComponent = invariant hasValue(componentReference);
        rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
        rule attachedOnlyToCallerRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, CallerRoleT);
     };
     port RequestPortT0 : ExplicitIntentCallPortT = new ExplicitIntentCallPortT extended with {
        property componentReference = "CheckUpdateService";
        rule mustReferenceComponent = invariant hasValue(componentReference);
        rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
        rule attachedOnlyToCallerRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, CallerRoleT);
     };
     port ImplicitIntentBroadcastAnnouncerPortT0 : ImplicitIntentBroadcastAnnouncerPortT = new ImplicitIntentBroadcastAnnouncerPortT extended with {
        property action = "com.google.android.photostream.FLICKR_STREAM";
        rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | declaresType(a, AnnouncerRoleT);
        rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
        rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, PublisherRoleT);
     };
     property state = Created;
     property class = "LoginActivity";
     property intentFilters = {
        "android.intent.action.MAIN", "android.intent.action.SET_WALLPAPER", "android.intent.action.CREATE_SHORTCUT" };
     property exported = true;
     rule activityStateValid = invariant hasValue(state);
     rule exportedIfIntentFilters = heuristic exported <-> size(intentFilters) > 0;
  };
  component CheckUpdateService : ServiceComponentT = new ServiceComponentT extended with {
     port Request : ExplicitIntentResponsePortT = new ExplicitIntentResponsePortT extended with {
        rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
        rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, ResponderRoleT);
     };
     port ResponsePortT0 : ExplicitIntentResponsePortT = new ExplicitIntentResponsePortT extended with {
        rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
        rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, ResponderRoleT);
     };
     property class = "CheckUpdateService";
     property exported = false;
     property intentFilters = {
     };
     rule exportedIfIntentFilters = heuristic exported <-> size(intentFilters) > 0;
  };
  component SettingsActivity : ActivityComponentT = new ActivityComponentT extended with {
     port ExplicitIntentResponsePortT0 : ExplicitIntentResponsePortT = new ExplicitIntentResponsePortT extended with {
        rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
        rule attachedOnlyToReponderRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, ResponderRoleT);
     };
     property state = Created;
     property class = "SettingsActivity";
     property intentFilters = {
     };
     property exported = false;
     rule activityStateValid = invariant hasValue(state);
     rule exportedIfIntentFilters = heuristic exported <-> size(intentFilters) > 0;
  };
  component PhotostreamActivity : ActivityComponentT = new ActivityComponentT extended with {
     port ImplicitIntentBroadcastReceivePortT0 : ImplicitIntentBroadcastReceivePortT = new ImplicitIntentBroadcastReceivePortT extended with {
        rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | declaresType(a, ReceiverRoleT);
        rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
        rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, SubscriberRoleT);
     };
     port ImplicitIntentBroadcastAnnouncerPortT0 : ImplicitIntentBroadcastAnnouncerPortT = new ImplicitIntentBroadcastAnnouncerPortT extended with {
        property action = "com.google.android.photostream.FLICKR_PHOTO";
        rule attachedOnlyToAnnouncerRoleT = invariant forall a in self.ATTACHEDROLES | declaresType(a, AnnouncerRoleT);
        rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
        rule attachedToPublisherRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, PublisherRoleT);
     };
     property state = Created;
     property class = "PhotostreamActivity";
     property intentFilters = {
        "com.google.android.photostream.FLICKR_STREAM", "android.intent.action.VIEW" };
     property exported = true;
     rule activityStateValid = invariant hasValue(state);
     rule exportedIfIntentFilters = heuristic exported <-> size(intentFilters) > 0;
  };
  component BootReceiver : BroadcastReceiverComponentT = new BroadcastReceiverComponentT extended with {
     port Response : ExplicitIntentCallPortT = new ExplicitIntentCallPortT extended with {
        property componentReference = "CheckUpdateService";
        rule mustReferenceComponent = invariant hasValue(componentReference);
        rule atLeast1Attachment = heuristic size(self.ATTACHEDROLES) >= 1;
        rule attachedOnlyToCallerRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, CallerRoleT);
     };
     port ImplicitIntentBroadcastReceivePortT0 : ImplicitIntentBroadcastReceivePortT = new ImplicitIntentBroadcastReceivePortT extended with {
        rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | declaresType(a, ReceiverRoleT);
        rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
        rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, SubscriberRoleT);
     };
     property class = "BootReceiver";
     property intentFilters = {
        "android.intent.action.BOOT_COMPLETED" };
     property exported = true;
     rule exportedIfIntentFilters = heuristic exported <-> size(intentFilters) > 0;
  };
  component ViewPhotoActivity : ActivityComponentT = new ActivityComponentT extended with {
     port ImplicitIntentBroadcastReceivePortT0 : ImplicitIntentBroadcastReceivePortT = new ImplicitIntentBroadcastReceivePortT extended with {
        rule attachedOnlyToReceiverRoleT = invariant forall a in self.ATTACHEDROLES | declaresType(a, ReceiverRoleT);
        rule exactly1Attachment = heuristic size(self.ATTACHEDROLES) == 1;
        rule attachedToSubscriberRoleT = invariant forall r in self.ATTACHEDROLES | declaresType(r, SubscriberRoleT);
     };
     property state = Created;
     property class = "ViewPhotoActivity";
     property intentFilters = {
        "com.google.android.photostream.FLICKR_PHOTO" };
     property exported = true;
     rule activityStateValid = invariant hasValue(state);
     rule exportedIfIntentFilters = heuristic exported <-> size(intentFilters) > 0;
  };
  connector IntentCallResponseConnectorT4 : IntentCallResponseConnectorT = new IntentCallResponseConnectorT extended with {
     role response : ExplicitIntentResponseRoleT = new ExplicitIntentResponseRoleT extended with {
        rule exactly1Attachment = heuristic size(self.ATTACHEDPORTS) == 1;
        rule attachedOnlyToResponsePort = invariant forall p : Port in self.ATTACHEDPORTS | declaresType(p, ResponsePortT);
     };
     role call : ExplicitIntentCallRoleT = new ExplicitIntentCallRoleT extended with {
        rule exactly1Attachment = heuristic size(self.ATTACHEDPORTS) == 1;
        rule attachedOnlyToRequestPort = invariant forall p : Port in self.ATTACHEDPORTS | declaresType(p, RequestPortT);
     };
     property pending = false;
     rule exactly2Roles = invariant size(self.ROLES) == 2;
     rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | declaresType(r, CallerRoleT);
     rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | declaresType(r, ResponderRoleT);
  };
  connector ContentProviderConnectorT0 : ContentProviderConnectorT = new ContentProviderConnectorT extended with {
     role repository : ContentProviderResponseRoleT = new ContentProviderResponseRoleT extended with {
        rule attached = invariant size(self.ATTACHEDPORTS) > 0;
        rule attachedOnlyToRepositoryPort = invariant forall p : Port in self.ATTACHEDPORTS | declaresType(p, RepositoryPortT);
     };
     role access : ContentProviderRequestRoleT = new ContentProviderRequestRoleT extended with {
        rule attached = invariant size(self.ATTACHEDPORTS) > 0;
        rule attachedOnlyToDataAccessorPort = invariant forall p : Port in self.ATTACHEDPORTS | declaresType(p, DataAccessorPortT);
     };
     rule atLeastOneOfTheseTypesDataAccessorRoleT = heuristic exists r : Role in self.ROLES | declaresType(r, DataAccessorRoleT);
     rule atLeastTheseTypesRepositoryRoleT = heuristic exists e in self.ROLES | declaresType(e, RepositoryRoleT);
  };
  connector IntentCallResponseConnectorT0 : IntentCallResponseConnectorT = new IntentCallResponseConnectorT extended with {
     role ExplicitIntentCallRoleT0 : ExplicitIntentCallRoleT = new ExplicitIntentCallRoleT extended with {
        rule exactly1Attachment = heuristic size(self.ATTACHEDPORTS) == 1;
        rule attachedOnlyToRequestPort = invariant forall p : Port in self.ATTACHEDPORTS | declaresType(p, RequestPortT);
     };
     role ExplicitIntentResponseRoleT0 : ExplicitIntentResponseRoleT = new ExplicitIntentResponseRoleT extended with {
        rule exactly1Attachment = heuristic size(self.ATTACHEDPORTS) == 1;
        rule attachedOnlyToResponsePort = invariant forall p : Port in self.ATTACHEDPORTS | declaresType(p, ResponsePortT);
     };
     property pending = false;
     rule exactly2Roles = invariant size(self.ROLES) == 2;
     rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | declaresType(r, CallerRoleT);
     rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | declaresType(r, ResponderRoleT);
  };
  connector IntentCallResponseConnectorT1 : IntentCallResponseConnectorT = new IntentCallResponseConnectorT extended with {
     role ExplicitIntentCallRoleT0 : ExplicitIntentCallRoleT = new ExplicitIntentCallRoleT extended with {
        rule exactly1Attachment = heuristic size(self.ATTACHEDPORTS) == 1;
        rule attachedOnlyToRequestPort = invariant forall p : Port in self.ATTACHEDPORTS | declaresType(p, RequestPortT);
     };
     role ExplicitIntentResponseRoleT0 : ExplicitIntentResponseRoleT = new ExplicitIntentResponseRoleT extended with {
        rule exactly1Attachment = heuristic size(self.ATTACHEDPORTS) == 1;
        rule attachedOnlyToResponsePort = invariant forall p : Port in self.ATTACHEDPORTS | declaresType(p, ResponsePortT);
     };
     property pending = false;
     rule exactly2Roles = invariant size(self.ROLES) == 2;
     rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | declaresType(r, CallerRoleT);
     rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | declaresType(r, ResponderRoleT);
  };
  connector ContentProviderConnectorT2 : ContentProviderConnectorT = new ContentProviderConnectorT extended with {
     role repository : ContentProviderResponseRoleT = new ContentProviderResponseRoleT extended with {
        rule attached = invariant size(self.ATTACHEDPORTS) > 0;
        rule attachedOnlyToRepositoryPort = invariant forall p : Port in self.ATTACHEDPORTS | declaresType(p, RepositoryPortT);
     };
     role access : ContentProviderRequestRoleT = new ContentProviderRequestRoleT extended with {
        rule attached = invariant size(self.ATTACHEDPORTS) > 0;
        rule attachedOnlyToDataAccessorPort = invariant forall p : Port in self.ATTACHEDPORTS | declaresType(p, DataAccessorPortT);
     };
     rule atLeastOneOfTheseTypesDataAccessorRoleT = heuristic exists r : Role in self.ROLES | declaresType(r, DataAccessorRoleT);
     rule atLeastTheseTypesRepositoryRoleT = heuristic exists e in self.ROLES | declaresType(e, RepositoryRoleT);
  };
  connector ContentProviderConnectorT1 : ContentProviderConnectorT = new ContentProviderConnectorT extended with {
     role repository : ContentProviderResponseRoleT = new ContentProviderResponseRoleT extended with {
        rule attached = invariant size(self.ATTACHEDPORTS) > 0;
        rule attachedOnlyToRepositoryPort = invariant forall p : Port in self.ATTACHEDPORTS | declaresType(p, RepositoryPortT);
     };
     role access : ContentProviderRequestRoleT = new ContentProviderRequestRoleT extended with {
        rule attached = invariant size(self.ATTACHEDPORTS) > 0;
        rule attachedOnlyToDataAccessorPort = invariant forall p : Port in self.ATTACHEDPORTS | declaresType(p, DataAccessorPortT);
     };
     rule atLeastOneOfTheseTypesDataAccessorRoleT = heuristic exists r : Role in self.ROLES | declaresType(r, DataAccessorRoleT);
     rule atLeastTheseTypesRepositoryRoleT = heuristic exists e in self.ROLES | declaresType(e, RepositoryRoleT);
  };
  connector IntentCallResponseConnectorT2 : IntentCallResponseConnectorT = new IntentCallResponseConnectorT extended with {
     role ExplicitIntentCallRoleT0 : ExplicitIntentCallRoleT = new ExplicitIntentCallRoleT extended with {
        rule exactly1Attachment = heuristic size(self.ATTACHEDPORTS) == 1;
        rule attachedOnlyToRequestPort = invariant forall p : Port in self.ATTACHEDPORTS | declaresType(p, RequestPortT);
     };
     role ExplicitIntentResponseRoleT0 : ExplicitIntentResponseRoleT = new ExplicitIntentResponseRoleT extended with {
        rule exactly1Attachment = heuristic size(self.ATTACHEDPORTS) == 1;
        rule attachedOnlyToResponsePort = invariant forall p : Port in self.ATTACHEDPORTS | declaresType(p, ResponsePortT);
     };
     property pending = false;
     rule exactly2Roles = invariant size(self.ROLES) == 2;
     rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | declaresType(r, CallerRoleT);
     rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | declaresType(r, ResponderRoleT);
  };
  connector IntentCallResponseConnectorT3 : IntentCallResponseConnectorT = new IntentCallResponseConnectorT extended with {
     role ExplicitIntentCallRoleT0 : ExplicitIntentCallRoleT = new ExplicitIntentCallRoleT extended with {
        rule exactly1Attachment = heuristic size(self.ATTACHEDPORTS) == 1;
        rule attachedOnlyToRequestPort = invariant forall p : Port in self.ATTACHEDPORTS | declaresType(p, RequestPortT);
     };
     role ExplicitIntentResponseRoleT0 : ExplicitIntentResponseRoleT = new ExplicitIntentResponseRoleT extended with {
        rule exactly1Attachment = heuristic size(self.ATTACHEDPORTS) == 1;
        rule attachedOnlyToResponsePort = invariant forall p : Port in self.ATTACHEDPORTS | declaresType(p, ResponsePortT);
     };
     property pending = false;
     rule exactly2Roles = invariant size(self.ROLES) == 2;
     rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | declaresType(r, CallerRoleT);
     rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | declaresType(r, ResponderRoleT);
  };
  connector IntentCallResponseConnectorT5 : IntentCallResponseConnectorT = new IntentCallResponseConnectorT extended with {
     role response : ExplicitIntentResponseRoleT = new ExplicitIntentResponseRoleT extended with {
        rule exactly1Attachment = heuristic size(self.ATTACHEDPORTS) == 1;
        rule attachedOnlyToResponsePort = invariant forall p : Port in self.ATTACHEDPORTS | declaresType(p, ResponsePortT);
     };
     role call : ExplicitIntentCallRoleT = new ExplicitIntentCallRoleT extended with {
        rule exactly1Attachment = heuristic size(self.ATTACHEDPORTS) == 1;
        rule attachedOnlyToRequestPort = invariant forall p : Port in self.ATTACHEDPORTS | declaresType(p, RequestPortT);
     };
     property pending = false;
     rule exactly2Roles = invariant size(self.ROLES) == 2;
     rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | declaresType(r, CallerRoleT);
     rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | declaresType(r, ResponderRoleT);
  };
  connector ImplicitIntentBus = {
     role r_ImplicitIntentBroadcastReceiveRoleT : ImplicitIntentBroadcastReceiveRoleT = new ImplicitIntentBroadcastReceiveRoleT;
     role r_ImplicitIntentBroadcastReceiveRoleT0 : ImplicitIntentBroadcastReceiveRoleT = new ImplicitIntentBroadcastReceiveRoleT;
     role r_ImplicitIntentBroadcastAnnounceRoleT : ImplicitIntentBroadcastAnnounceRoleT = new ImplicitIntentBroadcastAnnounceRoleT;
     role r_ImplicitIntentBroadcastReceiveRoleT1 : ImplicitIntentBroadcastReceiveRoleT = new ImplicitIntentBroadcastReceiveRoleT;
     role r_ImplicitIntentBroadcastReceiveRoleT2 : ImplicitIntentBroadcastReceiveRoleT = new ImplicitIntentBroadcastReceiveRoleT;
     role r_ImplicitIntentBroadcastReceiveRoleT3 : ImplicitIntentBroadcastReceiveRoleT = new ImplicitIntentBroadcastReceiveRoleT;
     role r_ImplicitIntentBroadcastReceiveRoleT4 : ImplicitIntentBroadcastReceiveRoleT = new ImplicitIntentBroadcastReceiveRoleT;
     role r_ImplicitIntentBroadcastReceiveRoleT5 : ImplicitIntentBroadcastReceiveRoleT = new ImplicitIntentBroadcastReceiveRoleT;
     role r_ImplicitIntentBroadcastReceiveRoleT6 : ImplicitIntentBroadcastReceiveRoleT = new ImplicitIntentBroadcastReceiveRoleT;
     role r_ImplicitIntentBroadcastReceiveRoleT7 : ImplicitIntentBroadcastReceiveRoleT = new ImplicitIntentBroadcastReceiveRoleT;
     role r_ImplicitIntentBroadcastReceiveRoleT8 : ImplicitIntentBroadcastReceiveRoleT = new ImplicitIntentBroadcastReceiveRoleT;
     role r_ImplicitIntentBroadcastReceiveRoleT9 : ImplicitIntentBroadcastReceiveRoleT = new ImplicitIntentBroadcastReceiveRoleT;
     role r_ImplicitIntentBroadcastReceiveRoleT10 : ImplicitIntentBroadcastReceiveRoleT = new ImplicitIntentBroadcastReceiveRoleT;
     role r_ImplicitIntentBroadcastAnnounceRoleT0 : ImplicitIntentBroadcastAnnounceRoleT = new ImplicitIntentBroadcastAnnounceRoleT;
     role r_ImplicitIntentBroadcastAnnounceRoleT1 : ImplicitIntentBroadcastAnnounceRoleT = new ImplicitIntentBroadcastAnnounceRoleT;
     role r_ImplicitIntentBroadcastReceiveRoleT11 : ImplicitIntentBroadcastReceiveRoleT = new ImplicitIntentBroadcastReceiveRoleT;
  };
  connector IntentCallResponseConnectorT6 : IntentCallResponseConnectorT = new IntentCallResponseConnectorT extended with {
     role ExplicitIntentCallRoleT0 : ExplicitIntentCallRoleT = new ExplicitIntentCallRoleT extended with {
        rule exactly1Attachment = heuristic size(self.ATTACHEDPORTS) == 1;
        rule attachedOnlyToRequestPort = invariant forall p : Port in self.ATTACHEDPORTS | declaresType(p, RequestPortT);
     };
     role ExplicitIntentResponseRoleT0 : ExplicitIntentResponseRoleT = new ExplicitIntentResponseRoleT extended with {
        rule exactly1Attachment = heuristic size(self.ATTACHEDPORTS) == 1;
        rule attachedOnlyToResponsePort = invariant forall p : Port in self.ATTACHEDPORTS | declaresType(p, ResponsePortT);
     };
     property pending = true;
     rule exactly2Roles = invariant size(self.ROLES) == 2;
     rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | declaresType(r, CallerRoleT);
     rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | declaresType(r, ResponderRoleT);
  };
  connector IntentCallResponseConnectorT7 : IntentCallResponseConnectorT = new IntentCallResponseConnectorT extended with {
     role ExplicitIntentCallRoleT0 : ExplicitIntentCallRoleT = new ExplicitIntentCallRoleT extended with {
        rule exactly1Attachment = heuristic size(self.ATTACHEDPORTS) == 1;
        rule attachedOnlyToRequestPort = invariant forall p : Port in self.ATTACHEDPORTS | declaresType(p, RequestPortT);
     };
     role ExplicitIntentResponseRoleT0 : ExplicitIntentResponseRoleT = new ExplicitIntentResponseRoleT extended with {
        rule exactly1Attachment = heuristic size(self.ATTACHEDPORTS) == 1;
        rule attachedOnlyToResponsePort = invariant forall p : Port in self.ATTACHEDPORTS | declaresType(p, ResponsePortT);
     };
     property pending = true;
     rule exactly2Roles = invariant size(self.ROLES) == 2;
     rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | declaresType(r, CallerRoleT);
     rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | declaresType(r, ResponderRoleT);
  };
  connector ExplicitIntent : IntentCallResponseConnectorT = new IntentCallResponseConnectorT extended with {
     role ExplicitIntentCallRoleT0 : ExplicitIntentCallRoleT = new ExplicitIntentCallRoleT extended with {
        rule exactly1Attachment = heuristic size(self.ATTACHEDPORTS) == 1;
        rule attachedOnlyToRequestPort = invariant forall p : Port in self.ATTACHEDPORTS | declaresType(p, RequestPortT);
     };
     role ExplicitIntentResponseRoleT0 : ExplicitIntentResponseRoleT = new ExplicitIntentResponseRoleT extended with {
        rule exactly1Attachment = heuristic size(self.ATTACHEDPORTS) == 1;
        rule attachedOnlyToResponsePort = invariant forall p : Port in self.ATTACHEDPORTS | declaresType(p, ResponsePortT);
     };
     property pending = false;
     rule exactly2Roles = invariant size(self.ROLES) == 2;
     rule exactly1RoleOfTypeCallerRoleT = invariant exists r in self.ROLES | declaresType(r, CallerRoleT);
     rule exactly1RoleOfTypeResponderRoleT = invariant exists r in self.ROLES | declaresType(r, ResponderRoleT);
  };
  attachment Manage_Identities.ExplicitIntentResponsePortT0 to IntentCallResponseConnectorT0.ExplicitIntentResponseRoleT0;
  attachment Accounts.ExplicitIntentResponsePortT0 to IntentCallResponseConnectorT3.ExplicitIntentResponseRoleT0;
  attachment Message_List.ContentProviderCallPortT0 to ContentProviderConnectorT1.access;
  attachment Message_List.p1 to IntentCallResponseConnectorT5.response;
  attachment Attachment_Provider.p to ContentProviderConnectorT2.repository;
  attachment Email_Address_List.p to IntentCallResponseConnectorT1.ExplicitIntentResponseRoleT0;
  attachment Manage_Identities.p to IntentCallResponseConnectorT2.ExplicitIntentCallRoleT0;
  attachment Account_Setting.ExplicitIntentCallPortT0 to IntentCallResponseConnectorT0.ExplicitIntentCallRoleT0;
  attachment Message_List.ContentProviderCallPortT1 to ContentProviderConnectorT0.access;
  attachment Message_List.p to ContentProviderConnectorT2.access;
  attachment Message_Compose.ExplicitIntentCallPortT0 to IntentCallResponseConnectorT3.ExplicitIntentCallRoleT0;
  attachment Choose_Folder.p1 to IntentCallResponseConnectorT5.call;
  attachment Message_Provider.ContentProviderResponsePortT0 to ContentProviderConnectorT0.repository;
  attachment Message_Compose.p to IntentCallResponseConnectorT1.ExplicitIntentCallRoleT0;
  attachment Email_Provider.p to ContentProviderConnectorT1.repository;
  attachment Edit_Identities.p to IntentCallResponseConnectorT2.ExplicitIntentResponseRoleT0;
  attachment Message_Compose.p0 to IntentCallResponseConnectorT4.call;
  attachment Choose_Folder.p to IntentCallResponseConnectorT4.response;
  attachment Accounts.ImplicitIntentBroadcastReceivePortT0 to ImplicitIntentBus.r_ImplicitIntentBroadcastReceiveRoleT;
  attachment Message_Compose.ImplicitIntentBroadcastReceivePortT0 to ImplicitIntentBus.r_ImplicitIntentBroadcastReceiveRoleT0;
  attachment Message_Compose.ImplicitIntentBroadcastAnnouncerPortT0 to ImplicitIntentBus.r_ImplicitIntentBroadcastAnnounceRoleT;
  attachment Message_List.ImplicitIntentBroadcastReceivePortT0 to ImplicitIntentBus.r_ImplicitIntentBroadcastReceiveRoleT1;
  attachment MailService.ImplicitIntentBroadcastReceivePortT0 to ImplicitIntentBus.r_ImplicitIntentBroadcastReceiveRoleT2;
  attachment Remote_Control_Service.ImplicitIntentBroadcastReceivePortT0 to ImplicitIntentBus.r_ImplicitIntentBroadcastReceiveRoleT3;
  attachment Notification_Service.ImplicitIntentBroadcastReceivePortT0 to ImplicitIntentBus.r_ImplicitIntentBroadcastReceiveRoleT4;
  attachment Remote_Control_Receiver.p to ImplicitIntentBus.r_ImplicitIntentBroadcastReceiveRoleT5;
  attachment Storage_Receiver.ImplicitIntentBroadcastReceivePortT0 to ImplicitIntentBus.r_ImplicitIntentBroadcastReceiveRoleT6;
  attachment Unread_Widget_Provider.ImplicitIntentBroadcastReceivePortT0 to ImplicitIntentBus.r_ImplicitIntentBroadcastReceiveRoleT7;
  attachment Boot_Receiver.ImplicitIntentBroadcastReceivePortT0 to ImplicitIntentBus.r_ImplicitIntentBroadcastReceiveRoleT8;
  attachment SettingsActivity.ExplicitIntentResponsePortT0 to ExplicitIntent.ExplicitIntentResponseRoleT0;
  attachment CheckUpdateService.ResponsePortT0 to IntentCallResponseConnectorT6.ExplicitIntentResponseRoleT0;
  attachment LoginActivity.ExplicitIntentCallPortT0 to ExplicitIntent.ExplicitIntentCallRoleT0;
  attachment BootReceiver.Response to IntentCallResponseConnectorT7.ExplicitIntentCallRoleT0;
  attachment CheckUpdateService.Request to IntentCallResponseConnectorT7.ExplicitIntentResponseRoleT0;
  attachment LoginActivity.RequestPortT0 to IntentCallResponseConnectorT6.ExplicitIntentCallRoleT0;
  attachment BootReceiver.ImplicitIntentBroadcastReceivePortT0 to ImplicitIntentBus.r_ImplicitIntentBroadcastReceiveRoleT9;
  attachment PhotostreamActivity.ImplicitIntentBroadcastReceivePortT0 to ImplicitIntentBus.r_ImplicitIntentBroadcastReceiveRoleT10;
  attachment PhotostreamActivity.ImplicitIntentBroadcastAnnouncerPortT0 to ImplicitIntentBus.r_ImplicitIntentBroadcastAnnounceRoleT0;
  attachment LoginActivity.ImplicitIntentBroadcastAnnouncerPortT0 to ImplicitIntentBus.r_ImplicitIntentBroadcastAnnounceRoleT1;
  attachment ViewPhotoActivity.ImplicitIntentBroadcastReceivePortT0 to ImplicitIntentBus.r_ImplicitIntentBroadcastReceiveRoleT11;
  group K9 : AndroidApplicationGroupT = new AndroidApplicationGroupT extended with {
     property usesPermissions = {
        "android.permission.RECEIVE_BOOT_COMPLETED", "android.permission.READ_CONTACTS", "android.permission.READ_SYNC_SETTINGS", "android.permission.WRITE_CONTACTS", "android.permission.ACCESS_NETWORK_STATE", "android.permission.INTERNET", "android.permission.VIBRATE", "android.permission.WAKE_LOCK", "android.permission.WRITE_EXTERNAL_STORAGE", "com.fsck.k9.permission.READ_ATTACHMENT", "com.fsk.k9.permission.REMOTE_CONTROL", "com.fsck.k9.permission.READ_MESSAGES", "com.fsck.k9.permission.DELETE_MESSAGES" };
     rule validMembers = invariant forall m in self.MEMBERS | declaresType(m, ApplicationElement) or declaresType(m, ContentProviderComponentT);
     rule validPermissions = invariant forall m :! ApplicationElement in self.MEMBERS | (hasValue(m.permission) -> contains(m.permission, usesPermissions));
     rule validPermission2 = invariant forall m :! ContentProviderComponentT in self.MEMBERS | (((hasValue(m.write-permission) and m.write-permission != "") -> contains(m.write-permission, usesPermissions) and (hasValue(m.read-permission) and m.read-permission != "") -> contains(m.read-permission, usesPermissions)));
     members {
        Accounts, Email_Address_List, Account_Setting, Manage_Identities, Message_Compose, Message_List, Choose_Folder, Edit_Identities, Attachment_Provider, Email_Provider, Message_Provider, Remote_Control_Receiver, Storage_Receiver, Unread_Widget_Provider, Notification_Service, Remote_Control_Service, MailService, Boot_Receiver } };
  group PhotoStream : AndroidApplicationGroupT = new AndroidApplicationGroupT extended with {
     property usesPermissions U= {
        "android.permission.INTERNET", "android.permission.RECEIVE_BOOT_COMPLETED", "android.permission.SET_WALLPAPER", "android.permission.VIBRATE" };
     rule validMembers = invariant forall m in self.MEMBERS | declaresType(m, ApplicationElement) or declaresType(m, ContentProviderComponentT);
     rule validPermissions = invariant forall m :! ApplicationElement in self.MEMBERS | (hasValue(m.permission) -> contains(m.permission, usesPermissions));
     rule validPermission2 = invariant forall m :! ContentProviderComponentT in self.MEMBERS | (((hasValue(m.write-permission) and m.write-permission != "") -> contains(m.write-permission, usesPermissions) and (hasValue(m.read-permission) and m.read-permission != "") -> contains(m.read-permission, usesPermissions)));
     members {
        BootReceiver, CheckUpdateService, LoginActivity, SettingsActivity, ViewPhotoActivity, PhotostreamActivity } };
}